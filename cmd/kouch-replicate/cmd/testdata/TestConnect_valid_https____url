(*kivik.DB)({
  client: (*kivik.Client)({
    dsn: (string) (len=20) "https://example.com/",
    driverName: (string) (len=5) "couch",
    driverClient: (*couchdb.client)({
      Client: (*chttp.Client)({
        UserAgents: ([]string) (len=2) {
          (string) (len=11) "Kivik/3.1.0",
          (string) (len=26) "Kivik CouchDB driver/3.1.0"
        },
        Client: (*http.Client)({
          Transport: (http.RoundTripper) <nil>,
          CheckRedirect: (func(*http.Request, []*http.Request) error) <nil>,
          Jar: (http.CookieJar) <nil>,
          Timeout: (time.Duration) 0
        }),
        rawDSN: (string) (len=20) "https://example.com/",
        dsn: (*url.URL)({
          Scheme: (string) (len=5) "https",
          Opaque: (string) "",
          User: (*url.Userinfo)(<nil>),
          Host: (string) (len=11) "example.com",
          Path: (string) (len=1) "/",
          RawPath: (string) "",
          ForceQuery: (bool) false,
          RawQuery: (string) "",
          Fragment: (string) ""
        }),
        auth: (chttp.Authenticator) <nil>,
        authMU: (sync.Mutex) {
          state: (int32) 0,
          sema: (uint32) 0
        }
      }),
      schedulerDetected: (*bool)(<nil>),
      sdMU: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      }
    })
  }),
  name: (string) (len=3) "bar",
  driverDB: (*couchdb.db)({
    client: (*couchdb.client)({
      Client: (*chttp.Client)({
        UserAgents: ([]string) (len=2) {
          (string) (len=11) "Kivik/3.1.0",
          (string) (len=26) "Kivik CouchDB driver/3.1.0"
        },
        Client: (*http.Client)({
          Transport: (http.RoundTripper) <nil>,
          CheckRedirect: (func(*http.Request, []*http.Request) error) <nil>,
          Jar: (http.CookieJar) <nil>,
          Timeout: (time.Duration) 0
        }),
        rawDSN: (string) (len=20) "https://example.com/",
        dsn: (*url.URL)({
          Scheme: (string) (len=5) "https",
          Opaque: (string) "",
          User: (*url.Userinfo)(<nil>),
          Host: (string) (len=11) "example.com",
          Path: (string) (len=1) "/",
          RawPath: (string) "",
          ForceQuery: (bool) false,
          RawQuery: (string) "",
          Fragment: (string) ""
        }),
        auth: (chttp.Authenticator) <nil>,
        authMU: (sync.Mutex) {
          state: (int32) 0,
          sema: (uint32) 0
        }
      }),
      schedulerDetected: (*bool)(<nil>),
      sdMU: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      }
    }),
    dbName: (string) (len=3) "bar"
  }),
  err: (error) <nil>
})
